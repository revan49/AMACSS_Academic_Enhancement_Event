3 Questions

Easy: Recursive tracing question

Question: What is the output of the following?

def randomFunc(A):
	''' (List of numbers) -> int
	Does something with the list of numbers A.
	'''
	x = 0
	if len(A) != 0:
		x += A[0] + randomFunc(A[1:])
	return x 

randomFunc([1,2,3,4,5])

Answer: 15

Medium:

Question: Sort the following functions (of positive integer n) in big-Oh order. I.e., write them in an order so that each function is in big-Oh of the one immediately after it. If functions are big-Oh of each other, then group them together using “==”.
For example, given three functions f1, f2 and f3 such that f1 ∈ O(f2) and f2 ∈ O(f1) and f1, f2 ∈ O(f3),
we would order them f1 == f2, f3.

12, 3n^3, n^2+log(n), 30, log(n^2), 2^n+3log(n)

Answer: 12 == 30, log(n^2), n^2+log(n), 2^n+3log(n), 3n^3

Hard:
Question: Code Heapify for a priority heap and find the complexity.
Hint: What is the height of a compact tree?
Hint: The index of the left child of the node at index i is 2i+1.
Hint: The index of the right child of the node at index i is 2i+2.
Hint: The index of the parent of the node at index i is (i-1)//2. [Integer division]

def heapify(A, i, size): # array A, start index i, int size = heapsize

Answer:
def heapify(A, i, size):
	max = i
	if ((2i+1) <= size and A[2i+1] > A[i]):
		max = 2i+1
	if ((2i+2) <= size and A[2i+2] > A[max]):
		max = 2i+2
	if ( max != i ):
		# swap A[i] and A[max]
		temp = A[max]
		A[max] = A[i]
		A[i] = temp
		# recursively call heapify
		heapify(A, max, size)

Complexity:
We know that a heap is represented by a compact tree that has the height of floor(lgn)+1.
Therefore, the Big-Oh is O(lg(n)).


